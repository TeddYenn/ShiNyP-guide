Genotype Data

Download Rice SNP data from SNP-Seek (3K RG): We utilized the 3K RG 18 million Base SNP Dataset and the 3K RG 404k Core SNP Dataset.

Align Accession IDs: Match the accession IDs between the phenotypic and SNP datasets.

SNP Data Processing and Quality Control: Perform data generation and quality control on the SNP data for the subset of 311 samples.

Generate Final Genotypic Dataset: Prepare the final genotypic dataset for GWAS analysis.

Download Rice SNP data from SNP-Seek (3K RG)

Data repository for the 3K RG, hosted by IRRI: <https://snpseekv3.irri-e-extension.com/v2/download.zul>

3K RG 18mio Base SNP Dataset: A base SNP set consisting of approximately 18 million SNPs was derived from the initial \~29 million biallelic SNPs by excluding those with an excessive number of heterozygous calls.

3K RG 404k CoreSNP Dataset: The Core SNP set was derived from the filtered SNP set through a two-step LD pruning procedure.

Please download the PLINK .bed, .bim, and .fam files for the two datasets. After downloading, extract the files and rename them as IRRI_18M_3024 and IRRI_404K_3024.

{block, type = "rmdnote"} The reference genome for these datasets is 'Nipponbare MSU7/IRGSP1.0'.

Align Accession IDs

We identified three issues related to inconsistencies in the spelling, formatting, and ranking of ID names between the phenotype data and genotype datasets:

The ID names in the phenotype data must correspond precisely with those in the genotype datasets, using the Mapping Table as a reference.

The format of ID names in the Mapping Table is inconsistent with the format used in the phenotype data. For example, consider a sample named EX WUKARI (WILD)::IRGC 63214-3:

ID in Phenotype

ID in Mapping Table

ID in Genotype

EX WUKARI (WILD)::IRGC 63214-3

EX_WUKARI\_(WILD)::IRGC_63214-1

IRIS_313-11657

IRIS_313-11657

In the genotype datasets, the rank order of ID names does not follow the correct sequence. For example, the correct order should be: IRIS_313-8890, IRIS_313-9101, and IRIS_313-11657, not IRIS_313-11657, IRIS_313-8890, and IRIS_313-9101.

##### R CODES

# Set the working directory

setwd("...change...")

# Load the datasets

IRRI_3K = read.csv("IRRI_3K_ID.csv") \# Mapping Table IRRI_341 = read.csv("IRRI_341_Pheno_AG_Original.csv") \# Phenotype Data

# Process designations in IRRI_3K dataset

IRRI_3K[1:5,2] IRRI_3K_ID = gsub("\_", " ", IRRI_3K[,2]) IRRI_341[1:5,1]

# Match designations between the two datasets

loc = c() for (i in 1:dim(IRRI_341)[1]) { match_index = which(IRRI_3K_ID == IRRI_341\$Designation[i]) if (length(match_index) == 0) { loc[i] = NA } else { loc[i] = match_index } }

# Check for unmatched entries and summarize

loc sum(is.na(loc))

# Create a new annotated data frame combining information from both datasets

IRRI_341_ID = data.frame("Designation" = IRRI_341$Designation)
for (i in 1:length(loc)) {
  if (is.na(loc[i])) {
    IRRI_341_ID$ID = NA } else { IRRI_341_ID$ID = IRRI_3K$X3K_DNA_IRIS_UNIQUE_ID[loc] IRRI_341_ID$Origin = IRRI_3K$Country_Origin_updated[loc] IRRI_341_ID$SRA = IRRI_3K$SRA[loc] IRRI_341_ID$Control_5DAS = IRRI_341$PERCENT_SEEDGER_5DAS IRRI_341_ID$Control_7DAS = IRRI_341$PERCENT_SEEDGER_7DAS IRRI_341_ID$Control_14DAS = IRRI_341$PERCENT_SEEDGER_14DAS IRRI_341_ID$AG_7DAS = IRRI_341$PERCENT_SEEDGER_7DAS_AG IRRI_341_ID$AG_14DAS = IRRI_341$PERCENT_SEEDGER_14DAS_AG } }

# Preview the annotated data frame

head(IRRI_341_ID) tail(IRRI_341_ID)

# Save the annotated data frame to a CSV file

write.csv(IRRI_341_ID, "IRRI_341_Pheno_AG_Original_ID.csv", row.names = F)

# Sort the annotated data by ID and identify specific entries

IRRI_341_ID_sorted = IRRI_341_ID[order(IRRI_341_ID$ID), ]
which(IRRI_341_ID_sorted$ID == "IRIS_313-7620") \# 245 which(IRRI_341_ID_sorted$ID == "IRIS_313-9989") # 311
which(IRRI_341_ID_sorted$ID == "IRIS_313-10020") \# 5 which(IRRI_341_ID_sorted\$ID == "IRIS_313-15901") \# 5

# Rearrange the data frame to exclude specific entries

IRRI_311_ID_sorted = IRRI_341_ID_sorted[c(1:4, 245:311, 5:244), ]

# Save the sorted and rearranged data frame to a CSV file

write.csv(IRRI_311_ID_sorted, "IRRI_311_Pheno_AG_Original_ID_Sorted.csv", row.names = F)

# Export a text file with the IDs for further analysis

write.table(cbind(IRRI_311_ID_sorted$ID, IRRI_311_ID_sorted$ID), "IRRI_311_ID.txt", row.names = F, col.names = F, quote = F)

This is a typical character vector that we might want to analyze. In order to turn it into a tidy text dataset, we first need to put it into a data frame.What does it mean that this data frame has printed out as a "tibble"? A tibble is a modern class of data frame within R, available in the dplyr and tibble packages, that has a convenient print method, will not convert strings to factors, and does not use row names. Tibbles are great for use with tidy tools.

Notice that this data frame containing text isn't yet compatible with tidy text analysis, though. We can't filter out words or count which occur most frequently, since each row is made up of multiple combined words. We need to convert this so that it has one-token-per-document-per-row.

{block, type = "rmdnote"} A token is a meaningful unit of text, most often a word, that we are interested in using for further analysis, and tokenization is the process of splitting text into tokens.

In this first example, we only have one document (the poem), but we will explore examples with multiple documents soon.

SNP Data Processing and Quality Control

The stop_words dataset in the tidytext package contains stop words from three lexicons. We can use them all together, as we have here, or filter() to only use one set of stop words if that is more appropriate for a certain analysis.

Generate Final Genotypic Dataset

Now that we've used the janeaustenr package to explore tidying text, let's introduce the gutenbergr package [@R-gutenbergr]. The gutenbergr package provides access to the public domain works from the Project Gutenberg collection.

Summary

In this chapter,
