# Extra Analysis and Visualization {#sec-extra}

## **Geographic Information**

Create a world map showcasing the percentage distribution of the origins
of 311 rice samples, represented using a gradient color scale.

➡️ **Working on R (RStudio).**

``` r
# Set the working directory (update the file path as needed)
setwd("...your file path...")

# Load the phenotype data from a CSV file
Pheno_data = read.csv("IRRI_311_Pheno_AG_Clean_ID_Sorted.csv")

# Extract the origin information and create a frequency table
origin = Pheno_data$Origin
table(origin)

# Create a data frame with region names, counts, and percentages
data = data.frame(
  "region" = names(table(origin)),  # Region names
  "number" = as.numeric(table(origin)),  # Number of occurrences per region
  "perc" = as.numeric(table(origin)) / length(Pheno_data$Origin)  # Percentage per region
)

# Load ggplot2 for visualization and map_data for world map data
library(ggplot2)
options(scipen = 999)  # Disable scientific notation for readability
world = map_data("world")  # Load world map data
head(world)  # Preview the world map data
write.csv(world, "world_map.csv")  # Save the world map data to a CSV file for reference

# Rename specific regions in the data frame for consistency with map data
data[4, 1] = "Brunei"
data[5, 1] = "Burkina Faso"
data[11, 1] = "Ivory Coast"
data[20, 1] = "Laos"
data[31, 1] = "Sierra Leone"
data[32, 1] = "Solomon Islands"
data[33, 1] = "Sri Lanka"
data[36, 1] = "Vietnam"
data[37, 1] = "Niger"

# Save the updated region information to a CSV file
write.csv(data, "origin_map.csv")

# Read the processed origin map data
origin_map = read.csv("origin_map.csv")

# Load additional libraries for data manipulation
library(dplyr)
library(stringr)
library(ggplot2)

# Merge the world map data with the origin map data by region
worldSubset = inner_join(world, origin_map, by = "region")
table(worldSubset$region)  # Check the frequency of regions in the subset

# Define a minimalist theme for the plot
plain = theme(
  axis.text = element_blank(),  # Remove axis text
  axis.line = element_blank(),  # Remove axis lines
  axis.ticks = element_blank(),  # Remove axis ticks
  panel.border = element_blank(),  # Remove panel border
  panel.grid = element_blank(),  # Remove grid lines
  axis.title = element_blank(),  # Remove axis titles
  panel.background = element_rect(fill = "white"),  # Set panel background to white
  plot.title = element_text(hjust = 0.5)  # Center the plot title
)

# Create a world map visualization with percentage-based fill
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
  # Add the base world map with light gray fill
  geom_polygon(data = world, aes(x = long, y = lat, group = group),
               fill = "#f7f6f6", color = "#999999", linewidth = 0.01) +
  # Fill regions based on percentage
  geom_polygon(aes(fill = perc)) +
  # Define a gradient color scale for the fill
  scale_fill_gradient(
    low = "#f2d489",  # Low percentage color
    high = "#e8542d",  # High percentage color
    name = "Percentage (%)",  # Legend title
    breaks = c(4, 8, 12),  # Breaks for the legend
    labels = c("4", "8", "12"),  # Labels for the legend
    guide = guide_colorbar(
      barwidth = 10,  # Width of the color bar
      barheight = 1.2  # Height of the color bar
    )
  ) +
  plain +  # Apply the minimalist theme
  # Customize the legend appearance and position
  theme(
    legend.title = element_text(size = 14),  # Legend title font size
    legend.text = element_text(size = 12),  # Legend text font size
    legend.position = "bottom"  # Position the legend at the bottom
  )

# Final plot size recommendation: 7' x 4'
```

## Linkage Disequilibrium (LD) Decay across Genome

Computation and visualization of LD decay:

1.  **LD Computation:** Utilizes PLINK to thin SNPs (10%) and calculate
    pairwise LD (r²) within specified distance windows (1000 Kb).

2.  **Data Processing:** Analyzes PLINK output to compute average r²
    across distance intervals (`window.size`), summarizing LD decay
    patterns.

3.  **Visualization:** Generates a smooth LD decay plot, highlighting
    the relationship between physical distance (kb) and LD (r²).

➡️ **Working on PLINK in the terminal.**

``` r
##### PLINK COMMANDS #####

# Change your path into the directory of the 'IRRI_18M_311'
# cd ...your file path...

./plink --bfile IRRI_1.9M_311 --thin 0.1 --set-hh-missing --r2 --ld-window-r2 0 --ld-window 99999 --ld-window-kb 1000 --out IRRI_190K_311_LD
```

➡️ **Working on R (RStudio).**

``` r
# Set the working directory (update with your file path)
setwd("...your file path...")

# Load the required library
library(data.table)

# Read the input data file containing LD information
LD = fread("IRRI_190K_311_LD.ld")

# Function to calculate LD decay
LD.decay = function(data, window.size){ 
  # Order the data by distance
  ld1 = data[order(data[, 5] - data[, 2]), ]
  distance = ld1[, 5] - ld1[, 2]  # Calculate distance between loci
  ld_distance = data.frame(distance, R2 = ld1$R2)  # Create a data frame with distance and R² values
  
  # Define blocks for the distance intervals
  block = seq(1, max(ld_distance[, 1]), by = window.size)
  ld2 = rep(0, length(block))  # Initialize an array to store mean R² values
  decay = data.frame(block, ld2)  # Create a data frame to store LD decay information
  
  # Initialize a progress bar
  pb = txtProgressBar(min = 0, max = length(block), style = 3)
  
  # Loop through each block to calculate mean R²
  for (i in seq_along(block)) {
    # Subset data within the current block range
    intv = subset(ld_distance, (ld_distance[, 1] >= block[i] & ld_distance[, 1] < (block[i] + window.size)))
    # Compute the mean R² for the current block
    decay[i, 2] = mean(intv[, 2], na.rm = TRUE)
    # Update the progress bar
    setTxtProgressBar(pb, i)
  }
  
  # Close the progress bar
  close(pb)
  
  return(decay)  # Return the LD decay data frame
}

# Run the LD decay function with a window size of 1000
LD.decay = LD.decay(data = LD, window.size = 1000)

# Save the LD decay data as an RDS file
saveRDS(LD.decay, "IRRI_190K_311_LD.rds")

# Load the saved LD decay data
LD.decay = readRDS("IRRI_190K_311_LD.rds")

# Load ggplot2 for visualization
library(ggplot2)

# Plot LD decay
ggplot(LD.decay) +
  labs(x = "Distance (kb)", y = expression(r^{2})) +  # Axis labels with proper formatting
  geom_line(aes(x = block, y = ld2), color = "#d3a02f", size = 2) +  # Add a line plot for LD decay
  scale_x_continuous(
    limits = c(0.0, 4.5*10^5),  # Set x-axis limits
    breaks = c(0, 1*10^5, 2*10^5, 3*10^5, 4*10^5),  # Define breaks
    labels = c("0", "100", "200", "300", "400"),  # Label breaks in kb
    expand = c(0.01, 0)  # Adjust axis expansion
  ) +
  scale_y_continuous(
    limits = c(0.0, 0.65),  # Set y-axis limits
    breaks = c(0, 0.2, 0.4, 0.6),  # Define breaks
    labels = c("0.0", "0.2", "0.4", "0.6"),  # Label breaks
    expand = c(0.03, 0)  # Adjust axis expansion
  ) +
  theme_classic() +  # Apply a classic theme
  theme(
    axis.title.x = element_text(size = 18),  # Customize x-axis title font size
    axis.title.y = element_text(size = 18, vjust = 2),  # Customize y-axis title font size and position
    axis.text.x = element_text(size = 16),  # Customize x-axis text font size
    axis.text.y = element_text(size = 16)   # Customize y-axis text font size
  )
  
# Final plot size recommendation: 6' x 4'
```

## AAA

bbb

➡️ **Working on R (RStudio).**

``` r
install.packages("BiocManager") BiocManager::install(version = "3.19") BiocManager::install("qvalue")
```
